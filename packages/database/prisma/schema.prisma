// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  googleToken String
  role        Role    @default(USER)
  projectCount Int    @default(3)

  // Relations
  projects    Project[]
  asyncJobs   AsyncJob[]
  orders      Order[]
}

model Project {
  id          String   @id @default(uuid())
  prompts     Json
  userId      String
  code        String?
  videoUrl    String? 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User model
  user        User     @relation(fields: [userId], references: [id])
  // Relation to AsyncJob model
  asyncJobs   AsyncJob[]
}

model AsyncJob {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  status    JobStatus @default(PROCESS)
  createdAt DateTime @default(now())

  // Relation to User model
  user      User     @relation(fields: [userId], references: [id])
  // Relation to Project model
  project   Project  @relation(fields: [projectId], references: [id])
}

model Pricing {
  id           String   @id @default(uuid())
  type         PricingModel
  projectCount Int
  pricing      String
}

model Order {
  id       String   @id @default(uuid())
  userId   String
  createdAt DateTime @default(now())
  status    PaymentStatus

  // Relation to User model
  user     User     @relation(fields: [userId], references: [id])
}

enum JobStatus {
  SUCCESS
  FAILED
  PROCESS
}

enum PaymentStatus {
  ORDER
  PENDING
  COMPLETED
}

enum PricingModel {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum Role {
  USER
  ADMIN
}